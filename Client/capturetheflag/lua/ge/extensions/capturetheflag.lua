-- Capture the Flag gamemode by deer boi :3
-- 							pls no steal
--
--
--
--	car reset:			can pick up in 10
--	flag dropped:		can pick up in 5
--	other picked up:	can pick up in 5
--	flag exchanged:		can pick up in 3
--
--
--
local M = {}


M.dependencies = {"ui_imgui"}

local gui_module = require("ge/extensions/editor/api/gui")
local gui = {setupEditorGuiTheme = nop}
local imgui = ui_imgui




local flagCarrier = nil
local flagCarrierPos = nil
local flagCarrierDamage = 0
local dropDamageTresh = 10000
local flagSpawnPoint = Point3F(0,0,-0.01)
local flagPos = nil
local flagRadius = 1.2
local timeCounter = 0 -- time, in seconds
local canPickUpFlagTime = 3 -- when this player can pick up the flag, generated by dropFlag()
local toggleNametags = true
local gameRunning = false
local scoreboardData = {} --{ ["batman"] = 40,["titch"] = 12,["deer boi"] = 15, }

local inactiveColor = Point4F(0.1,0.1,0.1, 1)
local activeColor = Point4F(1,1,0, 1)
local wonColor = Point4F(0,1,0, 1)


-- Helpers

local function mapValue(x, in_min, in_max, out_min, out_max)
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
end
local function constrain(x, in_min, in_max)
	if x > in_max then return in_max
	elseif x < in_min then return in_min
	else return x end
end
local function spairs(t, order) -- sorts pairs
    -- collect the keys
    local keys = {}
    for k in pairs(t) do keys[#keys+1] = k end

    -- if order function given, sort by it by passing the table and keys a, b,
    -- otherwise just sort the keys
    if order then
        table.sort(keys, function(a,b) return order(t, a, b) end)
    else
        table.sort(keys)
    end

    -- return the iterator function
    local i = 0
    return function()
        i = i + 1
        if keys[i] then
            return keys[i], t[keys[i]]
        end
    end
end
local function distance2D(pos1, pos2)
	return math.sqrt(math.pow(pos1.x-pos2.x,2)+math.pow(pos1.y-pos2.y,2))
end


-- GUI

local function showScoreboard()
	gui.showWindow("CtFscoreboard")
end
local function hideScoreboard()
	gui.hideWindow("CtFscoreboard")
end
local function setupScoreboard()
	gui_module.initialize(gui)
	gui.registerWindow("CtFscoreboard", imgui.ImVec2(256, 256))
end
local function drawScoreboard()
	if not gui.isWindowVisible("CtFscoreboard") then return end
	gui.setupWindow("CtFscoreboard")
	imgui.Begin("Scoreboard")
    imgui.SetNextWindowBgAlpha(0.8)

	local thisUser = MPConfig and MPConfig.getNickname() or ""
	local carrierUser = flagCarrier and MPVehicleGE and MPVehicleGE.getNicknameMap()[flagCarrier:getID()] or "not found"

	if carrierUser == "not found" and flagCarrier and MPVehicleGE then -- compatibility with older, more fucky wucky version
		for k,v in pairs(MPVehicleGE.getNicknameMap()) do
			if tonumber(k) == flagCarrier:getID() then carrierUser = v end
		end
	end

	imgui.Columns(2, "Bar") -- gimme ein táblázat
	for name, points in spairs(scoreboardData, function(t,a,b) return t[b] < t[a] end) do
		if name == thisUser then imgui.TextColored(imgui.ImVec4(0.0, 1.0, 1.0, 1.0), name) --teal if current user
		elseif name == carrierUser then imgui.TextColored(imgui.ImVec4(1.0, 1.0, 0.0, 1.0), name) --yellow if carrier
		else imgui.Text(name) end
		imgui.NextColumn()

		if name == carrierUser then imgui.TextColored(imgui.ImVec4(1.0, 1.0, 0.0, 1.0), tostring(points)) --yellow if carrier
		else imgui.Text(tostring(points)) end
		imgui.NextColumn()
	end

	imgui.Columns(1);
	imgui.End()
end




local function hideNicknames(hide)
	if toggleNametags then MPVehicleGE.hideNicknames(hide) end
end
local function dropFlag(localDrop, pickupTimeout)
	if flagCarrier then
		if localDrop then
			log("I","CtF", "DropFlagLocal "..tostring(flagCarrierID))
			TriggerServerEvent("CtFflagDropped", tostring( MPVehicleGE.getServerVehicleID(flagCarrier:getID())))
		else
			canPickUpFlagTime = timeCounter
		end

		flagCarrier.color = inactiveColor
		flagPos = flagCarrierPos or flagCarrier:getPosition()
	elseif not flagPos then
		flagPos = flagSpawnPoint
	end

	canPickUpFlagTime = timeCounter + pickupTimeout or 5

	flagCarrierDamage = 0
	flagCarrier = nil
	hideNicknames(false)
end

local function onUpdate(dt)
	timeCounter = timeCounter+dt
	drawScoreboard()
	if not gameRunning then return end

	if flagPos then --flag is on the ground
		local flagPosTop = Point3F(flagPos.x, flagPos.y, flagPos.z+2+mapValue(math.sin(timeCounter*1.5),0,1,0,0.5))
		local flagPosBottom = Point3F(flagPos.x, flagPos.y, mapValue(math.sin(timeCounter*1.5),0,1,0,0.5))

		if canPickUpFlagTime < timeCounter then
			debugDrawer:drawCylinder(flagPosBottom, flagPosTop, flagRadius, ColorF(0.6,0,0.7,0.5))
			for i = 0, be:getObjectCount()-1 do
				local veh = be:getObject(i)
				if MPVehicleGE.isOwn(veh:getID()) and distance2D(veh:getPosition(), flagPos) < flagRadius*1.5 then --flag picked up
					flagCarrier = veh
					flagPos = nil
					flagCarrierDamage = map.objects[flagCarrier:getID()].damage
					flagCarrier.color = activeColor
					canPickUpFlagTime = timeCounter + 3
					log("I", "CtF","Vehicle "..flagCarrier:getID().." picked up the flag at "..string.format("%.2f s", timeCounter))
					TriggerServerEvent("CtFflagPickedUp", tostring( MPVehicleGE.getServerVehicleID(flagCarrier:getID())))
					hideNicknames(true)
					return
				end
			end
		else
			debugDrawer:drawCylinder(flagPosBottom, flagPosTop, flagRadius, ColorF(0,0.6,0.7,0.5))
		end
	end


	if flagCarrier then --someone has the flag
		local flagCarrierID = flagCarrier:getID()
		local pos = flagCarrier:getPosition()
		flagCarrierPos = pos
		local distMap = MPVehicleGE and MPVehicleGE.getDistanceMap() or {}
		if distMap[flagCarrierID] then
			local beamIntensity = constrain(mapValue(distMap[flagCarrierID], 50, 500, 0, 1), 0, 1)
			local beamcolor = ColorF(1, 0.7, 0, beamIntensity)
			debugDrawer:drawCylinder(Point3F(pos.x, pos.y, pos.z-10), Point3F(pos.x, pos.y, pos.z+200), 2, beamcolor)
		end

		if canPickUpFlagTime < timeCounter then
			if MPVehicleGE.isOwn(flagCarrierID) and map.objects[flagCarrierID].damage > flagCarrierDamage+dropDamageTresh then
				dropFlag(true, 5)
				return
			end
			flagCarrierDamage = map.objects[flagCarrierID].damage

			for k,_ in pairs(map.objects[flagCarrierID].objectCollisions) do
				if  MPVehicleGE.isOwn(k) then
					local collidedVeh = be:getObjectByID(k)
					local collidedVehPos = collidedVeh:getPosition()
					if distance2D(pos, collidedVehPos) < 6 then -- flag taken from player -- to avoid false hits from dropped car parts
						flagCarrier.color = inactiveColor
						log("I", "CtF","Vehicle "..collidedVeh:getID().." took the flag from "..flagCarrier:getID()..string.format("at %.2f s", timeCounter))
						flagCarrier = collidedVeh
						flagCarrierDamage = map.objects[flagCarrier:getID()].damage
						flagCarrier.color = activeColor
						canPickUpFlagTime = timeCounter + 3
						TriggerServerEvent("CtFflagExchanged", tostring( MPVehicleGE.getServerVehicleID(flagCarrier:getID())))
						hideNicknames(true)
					end
				end
			end
		end
	end
end

local function onVehicleResetted(gameVehicleID)
	--if not gameRunning then return end
	--if not MPVehicleGE.isOwn(tostring(gameVehicleID)) then return end
	--if not flagCarrier then return end
	--if flagCarrier:getID() ~= gameVehicleID then return end
	if gameRunning and MPVehicleGE.isOwn(gameVehicleID) then
		--TriggerServerEvent("CtFremovePoints", tostring(MPVehicleGE.getServerVehicleID(gameVehicleID)))
	else return end

	if not (flagCarrier and flagCarrier:getID() == gameVehicleID) then return end

	log("I", "CtF", "Reset and dropped the flag")
	TriggerServerEvent("CtFremovePoints", tostring(MPVehicleGE.getServerVehicleID(gameVehicleID)))
	--TriggerServerEvent("CtFflagDropped", tostring(MPVehicleGE.getServerVehicleID(gameVehicleID)))
	dropFlag(true, 10)
end



local function setFlagSpawn(rawData)
	if rawData:sub(1,1) == ":" then rawData = rawData:sub(2) end -- cut off the leading :
	local data = jsonDecode(rawData)
	--dump(data)
	log("I", "CtF.remote","Set flag spawnpoint to:")
	dump(data)
	if not data.x then
		log("E", "CtF.remote", "Bad data received from server")
		return
	end
	flagSpawnPoint = Point3F(data.x, data.y, data.z)
end

local function requestFlagSpawn()
	log("I", "CtF.remote","Telling server to set the spawnpoint to ")
	local vid = be:getPlayerVehicleID(0)
	local vehicle = be:getObjectByID(vid)
	local vehiclePosition = vehicle:getPosition()
	local postable = {
		x = vehiclePosition.x,
		y = vehiclePosition.y,
		z = vehiclePosition.z
		}

	local strpos = jsonEncode(postable)
	strpos = strpos:gsub(":", ";")
	print(strpos)
	TriggerServerEvent("CtFsetFlagSpawnTo", strpos)
end

local function spawnPowerUp(rawData)
	if rawData:sub(1,1) == ":" then rawData = rawData:sub(2) end -- cut off the leading :
	local data = jsonDecode(rawData)
	dump(data)
	dump(data.pos)
end

local function remotePickedUpFlag(serverVehID)
	if serverVehID:sub(1,1) == ":" then serverVehID = serverVehID:sub(2) end -- cut off the leading :

	local gameVehicleID = MPVehicleGE.getGameVehicleID(serverVehID)
	local newFlagCarrier = be:getObjectByID(gameVehicleID)

	if flagCarrier then flagCarrier.color = inactiveColor end

	log("I", "CtF.remote","Vehicle "..gameVehicleID.." picked up the flag at "..string.format("%.2f s", timeCounter))
	flagPos = nil
	flagCarrier = newFlagCarrier
	flagCarrierDamage = map.objects[tonumber(gameVehicleID)].damage
	flagCarrier.color = activeColor
	canPickUpFlagTime = timeCounter + 5
	hideNicknames(false)
end

local function remoteExchangedFlag(serverVehID)
	if serverVehID:sub(1,1) == ":" then serverVehID = serverVehID:sub(2) end -- cut off the leading :

	local gameVehicleID = MPVehicleGE.getGameVehicleID(serverVehID)
	local newFlagCarrier = be:getObjectByID(gameVehicleID)

	if flagCarrier then flagCarrier.color = inactiveColor end

	log("I", "CtF.remote","Vehicle "..gameVehicleID.." took the flag from "..flagCarrier:getID()..string.format(" at %.2f s", timeCounter))
	flagPos = nil
	flagCarrier = newFlagCarrier
	flagCarrierDamage = map.objects[tonumber(gameVehicleID)].damage
	flagCarrier.color = activeColor
	canPickUpFlagTime = timeCounter + 3
	hideNicknames(false)
end

local function remoteDroppedFlag(serverVehID)
	log("I","CtF", "DropFlagRemote "..tostring(flagCarrierID));
	dropFlag(false, 3)
end

local function receiveScoreboard(rawData)
	if rawData:sub(1,1) == ":" then rawData = rawData:sub(2) end -- cut off the leading :
	local data = jsonDecode(rawData)
	scoreboardData = data
end

local function startGame(countdown)
	if countdown:sub(1,1) == ":" then countdown = countdown:sub(2) end -- cut off the leading :

	log('I', 'CtF', "Starting game")

	for _, vehicle in pairs(getAllVehicles()) do
		vehicle.color = inactiveColor
	end

	flagPos = flagSpawnPoint

	canPickUpFlagTime = timeCounter + (tonumber(countdown) or 10)
	flagCarrierDamage = 0
	flagCarrier = nil
	showScoreboard()
	gameRunning = true
end

local function playerWon(winnerName)
	if winnerName:sub(1,1) == ":" then winnerName = winnerName:sub(2) end -- cut off the leading :

	log("I", "CtF.remote","Player "..winnerName.." has won the game")
	if flagCarrier then flagCarrier.color = wonColor end
	flagPos = nil
	UI.showNotification("🎉 "..winnerName.." has won the game! 🎉", "CtFwon")
	gameRunning = false
	hideNicknames(false)
end

local function setConfig(config)
	config = config:gsub(';',':')
	config = jsonDecode(config)

	dump(config)

	toggleNametags = config.toggleNametags or toggleNametags

	dropDamageTresh = config.dropDamageTresh and tonumber(config.dropDamageTresh) or dropDamageTresh
	flagRadius = config.flagRadius and tonumber(config.flagRadius) or flagRadius
	flagSpawnPoint = config.flagSpawnPoint and Point3F(config.flagSpawnPoint.x, config.flagSpawnPoint.y, config.flagSpawnPoint.z) or flagSpawnPoint

	inactiveColor = config.inactiveColor and Point4F(config.inactiveColor.r, config.inactiveColor.g, config.inactiveColor.b, 1) or inactiveColor
	activeColor = config.activeColor and Point4F(config.activeColor.r, config.activeColor.g, config.activeColor.b, 1) or activeColor
	wonColor = config.wonColor and Point4F(config.wonColor.r, config.wonColor.g, config.wonColor.b, 1) or wonColor
end

if MPGameNetwork then -- just so we dont instantly error out without BeamMP
	AddEventHandler("CtFsetConfig",				setConfig)
	AddEventHandler("CtFremotesetFlagSpawn",	setFlagSpawn)
	AddEventHandler("CtFflagSpawnRequest",		requestFlagSpawn)
	AddEventHandler("CtFspawnPowerUp",			spawnPowerUp)
	AddEventHandler("CtFremotePickedUpFlag",	remotePickedUpFlag)
	AddEventHandler("CtFremoteExchangedFlag",	remoteExchangedFlag)
	AddEventHandler("CtFremoteDroppedFlag",		remoteDroppedFlag)
	AddEventHandler("CtFreceiveScoreboard",		receiveScoreboard)
	AddEventHandler("CtFrestartGame",			startGame)
	AddEventHandler("CtFplayerWon",				playerWon)
end



M.onExtensionLoaded		= setupScoreboard
M.onVehicleResetted		= onVehicleResetted
M.onUpdate				= onUpdate
M.showUI				= showScoreboard
M.hideUI				= hideScoreboard
M.test					= requestFlagSpawn

print("Capture the flag client loaded ~~")

return M